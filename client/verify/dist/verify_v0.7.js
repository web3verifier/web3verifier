/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***********************!*\
  !*** ./src/verify.ts ***!
  \***********************/
var SECURITY_SERVER = 'https://192.168.15.6:4433';
function send(url, callback) {
  var connect = new XMLHttpRequest();
  connect.open('GET', url, true);
  connect.onreadystatechange = function () {
    if (connect.readyState === 4 && connect.status === 200) {
      callback(connect.responseText);
    } else if (connect.status >= 307 && connect.readyState === 4) {
      alert('error');
    }
  };
  connect.send(null);
}
function isIFrame(input) {
  return input !== null && input.tagName === 'IFRAME';
}
function postMessage(iframe, msg) {
  if (isIFrame(iframe) && iframe.contentWindow) {
    iframe.contentWindow.postMessage(msg, SECURITY_SERVER);
  }
}
var iframe = document.createElement('iframe');
iframe.src = 'https://192.168.15.6:4433/verifycore_v0.7.html';
var web3verifier = document.getElementById('web3verifier');
web3verifier.appendChild(iframe);
window.addEventListener('message', function (event) {
  if (event.origin !== SECURITY_SERVER) {
    return;
  }
  if (event.data === 'web3verifier_getnonce') {
    send('./web3verifier_getnonce', function (nonce) {
      var host = window.location.hostname;
      var port = window.location.port;
      var url = '';
      if (port === '80') {
        url = 'https://' + host;
      } else {
        url = 'https://' + host + ':' + port;
      }
      postMessage(iframe, 'nonce_url=' + 'nonce=' + nonce + '&' + 'topurl=' + url);
    });
  } else if (event.data === 'web3verifier_getrequirement') {
    send('./web3verifier_getrequirement', function (requirement) {
      postMessage(iframe, 'requirement=' + requirement);
    });
  } else if (event.data === 'request topurl') {
    var topurl = window.top.location.href;
    postMessage(iframe, 'encoded_top_url=' + encodeURIComponent(topurl));
  } else {
    return;
  }
}, false);
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0wsUUFBUSxDQUFDTSxJQUFJO0lBQ3ZDdkIsV0FBVyxDQUFDQyxNQUFNLEVBQUUsa0JBQWtCLEdBQUd1QixrQkFBa0IsQ0FBQ0gsTUFBTSxDQUFDLENBQUM7R0FDdkUsTUFBTTtJQUNIOztBQUVSLENBQUMsRUFBRSxLQUFLLENBQUMsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZlcmlmeS8uL3NyYy92ZXJpZnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU0VDVVJJVFlfU0VSVkVSID0gJ2h0dHBzOi8vMTkyLjE2OC4xNS42OjQ0MzMnXG5cbmZ1bmN0aW9uIHNlbmQoIHVybCwgY2FsbGJhY2sgKSB7XG4gICAgbGV0IGNvbm5lY3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICBjb25uZWN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgY29ubmVjdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjb25uZWN0LnJlYWR5U3RhdGUgPT09IDQgJiYgY29ubmVjdC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgY2FsbGJhY2soIGNvbm5lY3QucmVzcG9uc2VUZXh0ICk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29ubmVjdC5zdGF0dXMgPj0gMzA3ICYmIGNvbm5lY3QucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgYWxlcnQoJ2Vycm9yJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29ubmVjdC5zZW5kKG51bGwpO1xufVxuZnVuY3Rpb24gaXNJRnJhbWUoaW5wdXQ6IEhUTUxFbGVtZW50IHwgbnVsbCk6IGlucHV0IGlzIEhUTUxJRnJhbWVFbGVtZW50e1xuICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiBpbnB1dC50YWdOYW1lID09PSAnSUZSQU1FJztcbn1cbmZ1bmN0aW9uIHBvc3RNZXNzYWdlKGlmcmFtZTpIVE1MSUZyYW1lRWxlbWVudCwgbXNnOiBzdHJpbmcpe1xuICAgIGlmIChpc0lGcmFtZShpZnJhbWUpICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKG1zZyAsIFNFQ1VSSVRZX1NFUlZFUik7XG4gICAgfVxufVxuXG5sZXQgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJylcbmlmcmFtZS5zcmMgPSAnaHR0cHM6Ly8xOTIuMTY4LjE1LjY6NDQzMy92ZXJpZnljb3JlX3YwLjcuaHRtbCdcbmxldCB3ZWIzdmVyaWZpZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2ViM3ZlcmlmaWVyJylcbndlYjN2ZXJpZmllci5hcHBlbmRDaGlsZChpZnJhbWUpXG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKGV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50Lm9yaWdpbiAhPT0gU0VDVVJJVFlfU0VSVkVSICl7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCBldmVudC5kYXRhID09PSAnd2ViM3ZlcmlmaWVyX2dldG5vbmNlJyl7XG4gICAgICAgIHNlbmQoICcuL3dlYjN2ZXJpZmllcl9nZXRub25jZScsIChub25jZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGhvc3QgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWVcbiAgICAgICAgICAgIGxldCBwb3J0ID0gd2luZG93LmxvY2F0aW9uLnBvcnRcbiAgICAgICAgICAgIGxldCB1cmwgPSAnJ1xuICAgICAgICAgICAgaWYgKCBwb3J0ID09PSAnODAnICkge1xuICAgICAgICAgICAgICAgIHVybCA9ICdodHRwczovLycgKyBob3N0XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVybCA9ICdodHRwczovLycgKyBob3N0ICsgJzonICsgcG9ydFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zdE1lc3NhZ2UoaWZyYW1lLCAnbm9uY2VfdXJsPScgKyAnbm9uY2U9JyArIG5vbmNlICsgJyYnICsgJ3RvcHVybD0nICsgdXJsKTtcbiAgICAgICAgfSApXG4gICAgfSBlbHNlIGlmICggZXZlbnQuZGF0YSA9PT0gJ3dlYjN2ZXJpZmllcl9nZXRyZXF1aXJlbWVudCcgKXtcbiAgICAgICAgc2VuZCggJy4vd2ViM3ZlcmlmaWVyX2dldHJlcXVpcmVtZW50JywgKHJlcXVpcmVtZW50KSA9PiB7XG4gICAgICAgICAgICBwb3N0TWVzc2FnZShpZnJhbWUsICdyZXF1aXJlbWVudD0nICsgcmVxdWlyZW1lbnQpO1xuICAgICAgICB9IClcbiAgICB9IGVsc2UgaWYgKCBldmVudC5kYXRhID09PSAncmVxdWVzdCB0b3B1cmwnICl7XG4gICAgICAgIGNvbnN0IHRvcHVybCA9IHdpbmRvdy50b3AubG9jYXRpb24uaHJlZjtcbiAgICAgICAgcG9zdE1lc3NhZ2UoaWZyYW1lLCAnZW5jb2RlZF90b3BfdXJsPScgKyBlbmNvZGVVUklDb21wb25lbnQodG9wdXJsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn0sIGZhbHNlKTtcblxuXG4iXSwibmFtZXMiOlsiU0VDVVJJVFlfU0VSVkVSIiwic2VuZCIsInVybCIsImNhbGxiYWNrIiwiY29ubmVjdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJhbGVydCIsImlzSUZyYW1lIiwiaW5wdXQiLCJ0YWdOYW1lIiwicG9zdE1lc3NhZ2UiLCJpZnJhbWUiLCJtc2ciLCJjb250ZW50V2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwid2ViM3ZlcmlmaWVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJhcHBlbmRDaGlsZCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIm9yaWdpbiIsImRhdGEiLCJub25jZSIsImhvc3QiLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwicG9ydCIsInJlcXVpcmVtZW50IiwidG9wdXJsIiwidG9wIiwiaHJlZiIsImVuY29kZVVSSUNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=